@page "/countries"

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles ="Admin")]

@if (Countries is null)
{
    <div class="spinner"/>
}
else
{
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-globe"></i> Paises
                <a class="btn btn-sm btn-primary float-end" href="/countries/create"><i class="oi oi-plus">Adiciona Pais</i></a>
            </span>
        </div>
        <div class="card-body">

            <GenericList MyList="Countries">
                <Body>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Paises</th>
                                <th style="width:220px">Estado / Departamento</th>
                                <th style="width:260px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var country in Countries!)
                            {
                                <tr>
                                    <td>
                                        @country.Name
                                    </td>
                                    <td>
                                        @country.StatesNumber
                                    </td>
                                    <td>
                                        <a href="/countries/details/@country.Id" class="btn btn-info btn-sm"><i class="oi oi-list" /> Detalle</a>
                                        <a href="/countries/edit/@country.Id" class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>
                                        <button class="btn btn-danger btn-sm"><i class="oi oi-trash" /> Borrar</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </Body>
            </GenericList>
        </div>
    </div>
}


@code {
    public List<Country>? Countries { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }
    private async Task Load()
    {
        try
        {
            var responseHttp = await repository.Get<List<Country>>("/api/countries/");
            Countries = responseHttp.Response!;
        }
        catch (Exception ex)
        {

            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);

        }
        
    }
    private async Task DeleteAsync(Country country)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmacion",
            Text = "!Esta seguro que quieres borar el registro?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true
        });
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }
        var responseHttp = await repository.Delete($"api/countries/{country.Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }else
            {
                var mensajeError = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
}
