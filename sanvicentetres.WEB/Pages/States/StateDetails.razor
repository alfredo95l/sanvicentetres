@page "/states/details/{StateId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@attribute [Authorize(Roles = "Admin")]

@if (state is null)
{
    <div class="spinner"/>
}
else
{
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-globe"></i> @state.Name
                <a href="/cities/create/@StateId" class="btn btn-sm btn-primary float-end"><i class="oi oi-plus"></i> Nueva Ciudad</a>
                <a class="btn btn-sm btn-success float-end mx-2" href="/countries/details/@state.CountryId"><i class="oi oi-arrow-thick-left"></i> Regresar</a>
            </span>
        </div>
        <div class="card-body">
            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">

            </div>
            <GenericList MyList="cities">
                <Body>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Ciudades</th>
                                <th style="width:180px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var city in cities!)
                        {
                            <tr>
                                <td>
                                    @city.Name
                                </td>
                                <td>
                                    <a class="btn btn-warning btn-sm"><i class="oi oi-pencil"></i>Editar</a>
                                    <button class="btn btn-danger btn-sm"><i class="oi oi-trash"></i> Borrar</button>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </Body>
            </GenericList>
        </div>
    </div>
}

@code {
    private State? state;
    private List<City>? cities;
    [Parameter]
    public int StateId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();   
    }

    private async Task LoadAsync()
    {
        var responseHttp = await repository.Get<State>($"/api/states/{StateId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        state = responseHttp.Response;
        cities = state!.Cities!.ToList();
    }
}
